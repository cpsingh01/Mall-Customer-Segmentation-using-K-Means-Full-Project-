# -*- coding: utf-8 -*-
"""Mall Customers clusters algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bE8L_10e1TT4hZsVmeQ4sBnKipHDGrrA

# 📦 Step 1: Import libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""# 📥 Step 2: Load data

"""

df = pd.read_csv('/content/Mall_Customers.csv')

df

print(df.head())

df.tail()

"""📊 Step 3: Exploratory Data Analysis

> # Info and nulls


"""

print(df.info())

"""# Gender count plot"""

sns.countplot(data=df, x='Gender')
plt.title("Gender Distribution")
plt.show()

"""# Age distribution"""

sns.histplot(df['Age'], bins=20, kde=True)
plt.title("Age Distribution")
plt.show()

# Annual income vs spending score
sns.scatterplot(data=df, x='Annual Income (k$)', y='Spending Score (1-100)', hue='Gender')
plt.title("Income vs Spending Score")
plt.show()

"""💡 Step 4: Feature Selection

"""

X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

"""📐 Step 5: Elbow Method"""

inertia = []
K = range(1, 11)

for k in K:
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X)
    inertia.append(km.inertia_)

plt.plot(K, inertia, 'bo-')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method for Optimal K')
plt.show()

"""🔍 Step 6: K-Means Clustering"""

kmeans = KMeans(n_clusters=5, random_state=42)
df['Cluster'] = kmeans.fit_predict(X)

"""🎯 Step 7: Visualize Clusters"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Annual Income (k$)', y='Spending Score (1-100)',
                hue='Cluster', palette='tab10', data=df, s=100)
plt.scatter(kmeans.cluster_centers_[:, 0],
            kmeans.cluster_centers_[:, 1],
            s=300, c='black', label='Centroids', marker='X')
plt.title("Customer Segments")
plt.legend()
plt.show()

"""📋 Step 8: Analyze Clusters"""

# Group by cluster
cluster_summary = df.groupby('Cluster')[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']].mean()
print(cluster_summary)

